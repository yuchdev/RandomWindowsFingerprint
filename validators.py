import re
import time
from soft_assert import SoftAssert


def validate_uuid(to_validate, message):
    SoftAssert.is_regex(to_validate, '[0-9,a-f,A-F]{8}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{4}-[0-9,a-f,A-F]{12}', message)
    

def validate_curl_uuid(uuid_string, message):
    SoftAssert.are_euqal(uuid_string[0], "{", message)
    SoftAssert.are_euqal(uuid_string[-1], "}", message)
    validate_uuid(uuid_string[1:-1], message)
    

def validate_product_id(to_validate, message):
    SoftAssert.is_regex(to_validate, '[0-9]{5}-[0-9,O][0-9,E][0-9,M]-[0-9]{7}-[0-9]{5}', message)
    

def validate_unix_time(to_validate, message):
    SoftAssert.is_true(to_validate < int(time.time()), message)


def validate_ie_installed_date(to_validate, message):
    validate_unix_time(int.from_bytes(to_validate[0:3], byteorder='big'), message)
    SoftAssert.are_euqal(len(to_validate), 8, message)


def validate_build_lab(to_validate, message):
    ListBuildLab = ['7601.win7sp1_ldr.170913-0600', '9600.winblue_r4.141028-1500', '16299.rs3_release.170928-1534']
    SoftAssert.is_in_list(to_validate, ListBuildLab, message)


def validate_build_lab_ex(to_validate, message):
    ListBuildLabEx = ['7601.23915.amd64fre.win7sp1_ldr.170913-0600', '9600.17415.amd64fre.winblue_r4.141028-1500', '16299.15.amd64fre.rs3_release.170928-1534']
    SoftAssert.is_in_list(to_validate, ListBuildLabEx, message)


def validate_current_build(to_validate, message):
    ListCurrentBuild = ['7601', '9600', '16299']
    SoftAssert.is_in_list(to_validate, ListCurrentBuild, message)


def validate_current_version(to_validate, message):
    ListCurrentVersion = ['6.1', '7.1', '9.0']
    SoftAssert.is_in_list(to_validate, ListCurrentVersion, message)


def validate_edition_id(to_validate, message):
    ListEditionId = ["Starter", "HomeBasic", "HomePremium", "Professional", "ProfessionalN", "ProfessionalKN", "Enterprise", "Ultimate", "Core", "Pro", "ProN", "Enterprise", "EnterpriseN", "OEM", "withBing", "Home", "ProEducation", "EnterpriseLTSB", "Education", "IoTCore", "IoTEnterprise", "S"]
    SoftAssert.is_in_list(to_validate, ListEditionId, message)


def validate_product_name(to_validate, message):
    split = to_validate.split(" ")
    name = " ".join([split[0], split[1]])
    ListProductName = ["Windows 7", "Windows 8.1", "Windows 10"]
    SoftAssert.is_in_list(name, ListProductName, message)
    validate_edition_id(split[2], message)


def validate_svc_kb_number(to_validate, message):
    ListKbNumber = ["KB2841134", "KB4088835", "KB4032782", "KB4016446", "KB3210694", "KB3200006", "KB3199375", "KB3192665", "KB4096040", "KB4089187", "KB4074736", "KB4056568", "KB4052978", "KB4047206", "KB4040685", "KB4036586", "KB4034733", "KB4025252", "KB4021558", "KB4018271", "KB4014661", "KB4012204", "KB3185319", "KB3175443", "KB3170106", "KB3160005", "KB3154070", "KB3148198"]
    SoftAssert.is_in_list(to_validate, ListKbNumber, message)


def validate_host_name(to_validate, message):
    SoftAssert.is_regex(to_validate, "^[a-zA-Z][a-zA-Z0-9]*$", message)


def validate_digital_product_id(to_validate, message):
    validate_product_id(str(to_validate[8:8+23])[2:-1], message)
    return
    mask = b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
    without_product_id = to_validate & mask
    expected = b'\xa4\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb9\xec\x21\x73\x00\x00\x00\x00\x00\x00\x00\x00'
    SoftAssert.is_binary_equal(without_product_id, expected, message)


def validate_digital_product_id4(to_validate, message):
    return
    example = b"\xf8\x04\x00\x00\x00\x00\x00\x009\x003\x002\x009\x002\x00-\x003\x007\x005\x003\x001\x00-\x002\x008\x009\x00-\x006\x000\x006\x005\x000\x008\x00-\x001\x006\x00-\x002\x005\x004\x008\x00-\x002\x004\x007\x002\x00(\x000\x000\x000\x000\x002\x000\x001\x007\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x000\x00b\x008\x000\x000\x00e\x00c\x006\x00-\x00d\x005\x00c\x005\x00-\x004\x00a\x00e\x006\x00-\x00a\x001\x00f\x009\x00-\x00d\x006\x004\x000\x005\x004\x006\x003\x005\x00c\x007\x005\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00P\x00r\x00o\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbf?\x01-\xdd\xfc\x0f\xed1\xd2\x9e\x0e\r\xf2\x80M\x94p\xfa\xf7\xda\x11\x8c\x00\x9a5*\x06\xa27O P\xf8\xa1;\xb0\x89.\x12N\x9f\x98\\c\x1c\xd9h\xa7\xfd\xd6\x14\xa8\xb1'Z\xa4\xab`}\x1dg\xc0\xe5\xfb=\x18\xe7\xc8\xecmb\xaa{\xd5\xb6\xf5\x99\xb9>L\x001\x008\x00-\x004\x009\x001\x000\x003\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00O\x00E\x00M\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00O\x00E\x00M\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"


def validate_sus_client_id_validation(to_validate, message):
    print(message + "\n" + str(to_validate))

